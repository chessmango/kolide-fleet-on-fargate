---
AWSTemplateFormatVersion: 2010-09-09
Description: Sample ECS service for Kolide on Fargate
Parameters:
  KolideAuthJWTKey:
    Type: String
    Description: dd if=/dev/urandom bs=24 count=1 status=none | base64
    NoEcho: true


Resources:
  ECSCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterName: !Ref AWS::StackName

  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref AWS::StackName
      RetentionInDays: 30


  KolideExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
        - Effect: "Allow"
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action:
          - "sts:AssumeRole"
      Policies:
      - PolicyName: !Sub ${AWS::StackName}-KolideExecutionPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - kms:Describe*
            - kms:Decrypt
            Resource:
              - Fn::Sub:
                - arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${KMSKey}
                - KMSKey: !ImportValue Kolide-KMSKey
          - Effect: Allow
            Action:
            - kms:ListKeys
            - kms:ListAliases
            Resource: "*"
          - Effect: Allow
            Action:
            - secretsmanager:GetSecretValue
            Resource:
              - !ImportValue Kolide-AuroraClusterPassword
          - Effect: Allow
            Action:
            - ecr:GetAuthorizationToken
            - ecr:BatchCheckLayerAvailability
            - ecr:GetDownloadUrlForLayer
            - ecr:BatchGetImage
            - logs:Create*
            - logs:Put*
            - ecs:DeregisterContainerInstance
            - ecs:DiscoverPollEndpoint
            - ecs:Poll
            - ecs:RegisterContainerInstance
            - ecs:StartTelemetrySession
            - ecs:UpdateContainerInstancesState
            - ecs:Submit*
            Resource: '*'


## Task definition
  KolideTask:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      Family: kolide-fargate
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: '1024'
      Memory: '2048'

      ContainerDefinitions:
      - Name: https-redirect
        Image: realkinetic/http-to-https
        MemoryReservation: 256
        PortMappings:
        - ContainerPort: 80
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref AWS::StackName
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: kolide-https-redirect

      - Name: kolide
        Image: kolide/fleet
        MemoryReservation: 256
        PortMappings:
        - ContainerPort: 8080
        Environment:
        - Name: KOLIDE_AUTH_JWT_KEY
          Value: !Ref KolideAuthJWTKey
        - Name: KOLIDE_MYSQL_ADDRESS
          Value:
            Fn::Sub:
              - '${AuroraEndPoint}:3306'
              - AuroraEndPoint: !ImportValue Kolide-AuroraClusterEndpoint
        - Name: KOLIDE_MYSQL_DATABASE
          Value: !ImportValue Kolide-AuroraDBName
        - Name: KOLIDE_MYSQL_USERNAME
          Value: !ImportValue Kolide-AuroraClusterUsername
        - Name: KOLIDE_REDIS_ADDRESS
          Value:
            Fn::Sub:
              - '${RedisEndpoint}:6379'
              - RedisEndpoint: !ImportValue Kolide-RedisEndpoint
        Secrets:
        - Name: KOLIDE_MYSQL_PASSWORD
          ValueFrom: !ImportValue Kolide-AuroraClusterPassword
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref AWS::StackName
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: kolide-fleet
      ExecutionRoleArn: !GetAtt KolideExecutionRole.Arn

# Service
  KolideService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 1
      TaskDefinition: !Ref KolideTask
      LaunchType: FARGATE
      PlatformVersion: '1.4.0'
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
          - !ImportValue Kolide-SecurityGroup
          Subnets:
          - !ImportValue Kolide-SubnetPriv0
          - !ImportValue Kolide-SubnetPriv1
      LoadBalancers:
      - ContainerName: https-redirect
        ContainerPort: 80
        TargetGroupArn: !Ref HTTPSRedirectTargetGroup
      - ContainerName: kolide
        ContainerPort: 8080
        TargetGroupArn: !Ref KolideTargetGroup
    DependsOn: KolideLoadBalancerListener

  HTTPSRedirectTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !ImportValue Kolide-VPC
      Port: 80
      Protocol: TCP
      TargetType: ip
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: TCP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3

  KolideTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !ImportValue Kolide-VPC
      Port: 8080
      Protocol: TCP
      TargetType: ip
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: TCP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3

  HTTPSRedirectLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !ImportValue Kolide-NetworkLoadBalancer
      Port: 80
      Protocol: TCP
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref HTTPSRedirectTargetGroup
  KolideLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !ImportValue Kolide-NetworkLoadBalancer
      Port: 443
      Protocol: TLS
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref KolideTargetGroup


Outputs:
  Service:
    Value: !Ref KolideService
    Export:
      Name: Kolide-ECSService